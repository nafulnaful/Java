class Operator 
{
	public static void main(String[] args) 
	{
		System.out.println("1. 산술연산자--------------");
		//+,-,*,/,%(나머지값을 구하는 연산자)
		int a=10;
		System.out.println(a*4);//40
		System.out.println(a/4);//2(int/int=int)
		System.out.println(a%3);//1
		/*Shift연산자
		[1] << : 왼쪽으로 비트수만큼 이동한다. 오른쪽에 남은 빈칸은 0으로 채운다.
		[2] >> : 오른쪽으로 비트수만큼 이동. 왼쪽에 남은 빈칸은 부호비트로 채운다.
		[3] >>>: 오른쪽으로 비트수만큼 이동. 왼쪽에 남은 빈칸은 무조건 0으로 채운다.
		
		42:   00000000 00000000 00000000 00101010
	 42<<3:   00000 00000000 00000000 00101010000
	 42>>3:   000 00000000 00000000 00000000 00101
	 42<<3:
		*/
		System.out.println("42<<3: "+(42<<3));//336
		System.out.println("42>>3: "+(42>>3));//5
		System.out.println("42>>>3: "+(42>>>3));//5
		/*
		-14
		[1] 양수(14)의 값의 비트를 나타내고, 그런 뒤에 1의 보수를 구한다.
		[2] 1의 보수값에 +1을 한다=> 2의 보수

		14
		 7...0
		 3...1
		 1...1

14:		 00000000 00000000 00000000 00001110
		 11111111 11111111 11111111 11110001 <=1의 보수(비트반전)
		 								  +1 <=2의 보수
		--------------------------------------
-14:		 11111111 11111111 11111111 11110010

tip) [1] 먼저 양수값의 비트를 구한다.
	 [2] 양수값의 하위 비트에서 첫 번째 1을 만날때까지는 양수와 동일하게 쓴다.
	 	 첫번째 1을 만난 상위비트는 비트반전을 한다.

-8:		11111111 11111111 11111111 11111000 
11100011
		*/
		System.out.println("-8<<2: "+(-8<<2));//-29
		System.out.println("-8>>2: "+(-8>>2));//
		System.out.println("-8>>>2: "+(-8>>>2));//
		
	}
}
